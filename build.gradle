plugins {
    id 'java'
    id 'jacoco'
}

group 'org.example'
version '0.1.0'

task fatJar(type: Jar) {

    manifest {
        attributes ("Name": "utils",
                "Specification-Version": version, "Main-Class": "org.example.Main")
    }

    archiveBaseName = "${rootProject.name}"
    tasks.withType(Jar){
        duplicatesStrategy = DuplicatesStrategy.INCLUDE
    }
    from { configurations.compileClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

repositories {
    mavenCentral()
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'

    implementation project(':ulils')
    implementation project(':core')
    implementation project(':core_jar')

}

tasks.register('bildModuleUlils', GradleBuild) {
    buildFile 'ulils/build.gradle'
    tasks = ['build']
    startParameter.projectProperties = [jarDir: "/jardir"]
}

tasks.register('copyJarModuleUlilsInRoot', Copy) {
    dependsOn(bildModuleUlils)

    from("ulils/build/libs") {
        include "*"
        rename("ulils.*jar", "my_lib.jar")
    }
    into("core_jar/build/dynamicJars")
}

compileJava.dependsOn copyJarModuleUlilsInRoot

test {
    useJUnitPlatform()
    finalizedBy(tasks.jacocoTestReport)
}

jacoco {
    toolVersion = "0.8.9"
    reportsDirectory.set(layout.buildDirectory.dir("reports/jacoco"))
}

tasks.jacocoTestReport {
    reports {
        xml.required.set(false)
        csv.required.set(false)
        html.outputLocation.set(layout.buildDirectory.dir("jacocoHtml"))
    }
}
